{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "*": [
        "node_modules/*"
      ],
      "@pom/*": [
        "pom/*"
      ],
      "@fixtures/*": [
        "fixtures/*"
      ],
      "@endpoints/*": [
        "endpoints/*"
      ],
      "@playwright.config": [
        "playwright.config.ts"
      ],
      "@types/*": [
        "types/*"
      ]
    },
    "typeRoots": [
      "./node_modules/@types",
      "./@types"
    ],
    /* Language and Environment */
    "target": "esnext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "moduleDetection": "auto" /* Control what method is used to detect module-format JS files. */,
    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    "resolveJsonModule": true /* Enable importing .json files. */,
    /* JavaScript Support */
    "allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
    "checkJs": false /* Enable error reporting in type-checked JavaScript files. */,
    /* Emit */
    "noEmit": true /* Disable emitting files from a compilation. */,
    "downlevelIteration": true /* Emit more compliant, but verbose and less performant JavaScript for iteration. */,
    /* Interop Constraints */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": false /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": false /* When type checking, take into account 'null' and 'undefined'. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictPropertyInitialization": false /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "exactOptionalPropertyTypes": false /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "allowUnreachableCode": true /* Disable error reporting for unreachable code. */,
    /* Completeness */
    "skipLibCheck": false /* Skip type checking all .d.ts files. */
  }
}